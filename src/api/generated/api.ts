/* tslint:disable */
/* eslint-disable */
/**
 * FamilyTree
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreatePersonDto
 */
export interface CreatePersonDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'birthDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'deathDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'birthPlace'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'deathPlace'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdatePersonDto
 */
export interface UpdatePersonDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'birthDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'deathDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'birthPlace'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'deathPlace'?: string | null;
}

/**
 * FamilyTreeApi - axios parameter creator
 * @export
 */
export const FamilyTreeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamilyTreeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FamilyTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FamilyTreeApi - functional programming interface
 * @export
 */
export const FamilyTreeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FamilyTreeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFamilyTreeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFamilyTreeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamilyTreeApi.apiFamilyTreeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FamilyTreeApi - factory interface
 * @export
 */
export const FamilyTreeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FamilyTreeApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamilyTreeGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFamilyTreeGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FamilyTreeApi - object-oriented interface
 * @export
 * @class FamilyTreeApi
 * @extends {BaseAPI}
 */
export class FamilyTreeApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyTreeApi
     */
    public apiFamilyTreeGet(options?: RawAxiosRequestConfig) {
        return FamilyTreeApiFp(this.configuration).apiFamilyTreeGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {File} [formFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileUploadGedPost: async (formFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/File/UploadGed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (formFile !== undefined) { 
                localVarFormParams.append('formFile', formFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {File} [formFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileUploadGedPost(formFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileUploadGedPost(formFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileApi.apiFileUploadGedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileApiFp(configuration)
    return {
        /**
         * 
         * @param {File} [formFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileUploadGedPost(formFile?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiFileUploadGedPost(formFile, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * 
     * @param {File} [formFile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileUploadGedPost(formFile?: File, options?: RawAxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileUploadGedPost(formFile, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PersonApi - axios parameter creator
 * @export
 */
export const PersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} fatherId 
         * @param {number} motherId 
         * @param {number} childId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonAddChildrenConnectionFatherFatherIdMotherMotherIdChildChildIdPost: async (fatherId: number, motherId: number, childId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fatherId' is not null or undefined
            assertParamExists('apiPersonAddChildrenConnectionFatherFatherIdMotherMotherIdChildChildIdPost', 'fatherId', fatherId)
            // verify required parameter 'motherId' is not null or undefined
            assertParamExists('apiPersonAddChildrenConnectionFatherFatherIdMotherMotherIdChildChildIdPost', 'motherId', motherId)
            // verify required parameter 'childId' is not null or undefined
            assertParamExists('apiPersonAddChildrenConnectionFatherFatherIdMotherMotherIdChildChildIdPost', 'childId', childId)
            const localVarPath = `/api/Person/AddChildrenConnection/father/{fatherId}/mother/{motherId}/child/{childId}`
                .replace(`{${"fatherId"}}`, encodeURIComponent(String(fatherId)))
                .replace(`{${"motherId"}}`, encodeURIComponent(String(motherId)))
                .replace(`{${"childId"}}`, encodeURIComponent(String(childId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} husbandId 
         * @param {number} wifeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonAddMariageHusbandHusbandIdWifeWifeIdPost: async (husbandId: number, wifeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'husbandId' is not null or undefined
            assertParamExists('apiPersonAddMariageHusbandHusbandIdWifeWifeIdPost', 'husbandId', husbandId)
            // verify required parameter 'wifeId' is not null or undefined
            assertParamExists('apiPersonAddMariageHusbandHusbandIdWifeWifeIdPost', 'wifeId', wifeId)
            const localVarPath = `/api/Person/AddMariage/husband/{husbandId}/wife/{wifeId}`
                .replace(`{${"husbandId"}}`, encodeURIComponent(String(husbandId)))
                .replace(`{${"wifeId"}}`, encodeURIComponent(String(wifeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePersonDto} [createPersonDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonAddPersonPost: async (createPersonDto?: CreatePersonDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Person/AddPerson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPersonDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonDeletePersonPersonIdIntDelete: async (personId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Person/DeletePerson/personId:int`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (personId !== undefined) {
                localVarQueryParameter['personId'] = personId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonGetPersonPersonIdIntGet: async (personId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Person/GetPerson/personId:int`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (personId !== undefined) {
                localVarQueryParameter['personId'] = personId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {UpdatePersonDto} [updatePersonDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonUpdatePersonPersonIdIntPut: async (personId?: number, updatePersonDto?: UpdatePersonDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Person/UpdatePerson/personId:int`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (personId !== undefined) {
                localVarQueryParameter['personId'] = personId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePersonDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonApi - functional programming interface
 * @export
 */
export const PersonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} fatherId 
         * @param {number} motherId 
         * @param {number} childId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonAddChildrenConnectionFatherFatherIdMotherMotherIdChildChildIdPost(fatherId: number, motherId: number, childId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonAddChildrenConnectionFatherFatherIdMotherMotherIdChildChildIdPost(fatherId, motherId, childId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonApi.apiPersonAddChildrenConnectionFatherFatherIdMotherMotherIdChildChildIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} husbandId 
         * @param {number} wifeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonAddMariageHusbandHusbandIdWifeWifeIdPost(husbandId: number, wifeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonAddMariageHusbandHusbandIdWifeWifeIdPost(husbandId, wifeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonApi.apiPersonAddMariageHusbandHusbandIdWifeWifeIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePersonDto} [createPersonDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonAddPersonPost(createPersonDto?: CreatePersonDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonAddPersonPost(createPersonDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonApi.apiPersonAddPersonPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonDeletePersonPersonIdIntDelete(personId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonDeletePersonPersonIdIntDelete(personId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonApi.apiPersonDeletePersonPersonIdIntDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonGetPersonPersonIdIntGet(personId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonGetPersonPersonIdIntGet(personId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonApi.apiPersonGetPersonPersonIdIntGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {UpdatePersonDto} [updatePersonDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonUpdatePersonPersonIdIntPut(personId?: number, updatePersonDto?: UpdatePersonDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonUpdatePersonPersonIdIntPut(personId, updatePersonDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonApi.apiPersonUpdatePersonPersonIdIntPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PersonApi - factory interface
 * @export
 */
export const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonApiFp(configuration)
    return {
        /**
         * 
         * @param {number} fatherId 
         * @param {number} motherId 
         * @param {number} childId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonAddChildrenConnectionFatherFatherIdMotherMotherIdChildChildIdPost(fatherId: number, motherId: number, childId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPersonAddChildrenConnectionFatherFatherIdMotherMotherIdChildChildIdPost(fatherId, motherId, childId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} husbandId 
         * @param {number} wifeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonAddMariageHusbandHusbandIdWifeWifeIdPost(husbandId: number, wifeId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPersonAddMariageHusbandHusbandIdWifeWifeIdPost(husbandId, wifeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePersonDto} [createPersonDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonAddPersonPost(createPersonDto?: CreatePersonDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPersonAddPersonPost(createPersonDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonDeletePersonPersonIdIntDelete(personId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPersonDeletePersonPersonIdIntDelete(personId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonGetPersonPersonIdIntGet(personId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPersonGetPersonPersonIdIntGet(personId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {UpdatePersonDto} [updatePersonDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonUpdatePersonPersonIdIntPut(personId?: number, updatePersonDto?: UpdatePersonDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPersonUpdatePersonPersonIdIntPut(personId, updatePersonDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonApi - object-oriented interface
 * @export
 * @class PersonApi
 * @extends {BaseAPI}
 */
export class PersonApi extends BaseAPI {
    /**
     * 
     * @param {number} fatherId 
     * @param {number} motherId 
     * @param {number} childId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public apiPersonAddChildrenConnectionFatherFatherIdMotherMotherIdChildChildIdPost(fatherId: number, motherId: number, childId: number, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).apiPersonAddChildrenConnectionFatherFatherIdMotherMotherIdChildChildIdPost(fatherId, motherId, childId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} husbandId 
     * @param {number} wifeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public apiPersonAddMariageHusbandHusbandIdWifeWifeIdPost(husbandId: number, wifeId: number, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).apiPersonAddMariageHusbandHusbandIdWifeWifeIdPost(husbandId, wifeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePersonDto} [createPersonDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public apiPersonAddPersonPost(createPersonDto?: CreatePersonDto, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).apiPersonAddPersonPost(createPersonDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [personId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public apiPersonDeletePersonPersonIdIntDelete(personId?: number, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).apiPersonDeletePersonPersonIdIntDelete(personId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [personId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public apiPersonGetPersonPersonIdIntGet(personId?: number, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).apiPersonGetPersonPersonIdIntGet(personId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [personId] 
     * @param {UpdatePersonDto} [updatePersonDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public apiPersonUpdatePersonPersonIdIntPut(personId?: number, updatePersonDto?: UpdatePersonDto, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).apiPersonUpdatePersonPersonIdIntPut(personId, updatePersonDto, options).then((request) => request(this.axios, this.basePath));
    }
}



